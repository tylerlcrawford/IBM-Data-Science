import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

import warnings
# Ignore all warnings of code that might not work as expected in future versions of python
warnings.filterwarnings("ignore", category=FutureWarning)

"""
Generates a plot with historical share price and revenue data for a given stock.

    Parameters:
        stock_data (DataFrame): DataFrame containing historical stock data.
        revenue_data (DataFrame): DataFrame containing historical revenue data.
        stock (str): Name of the stock.

    Returns:
        None
"""
def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()
    

#EX1: use yfinance to extrack Tesla stock data    
tesla = yf.Ticker("TSLA")
tesla_data = tesla.history(period="max")
tesla_data.reset_index(inplace=True) #in place index reset
tesla_data.head()

#EX1.2: use webscraping to extract tesla revenue data
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data  = requests.get(url).text
soup = BeautifulSoup(html_data) #parse HTML and XML docs

tesla_revenue =  pd.DataFrame(columns=["Date", "Revenue"]) #create pandas dataframe of the html data
# First we isolate the body of the table which contains all the information
# Then we loop through each row and find all the column values for each row
for row in soup.find("tbody").find_all('tr'):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text
    
    # Finally we append the data of each row to the table
    tesla_revenue = tesla_revenue.append({"Date":date, "Revenue":revenue}, ignore_index=True)    

tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"") #remove signs from Revenue column
tesla_revenue.dropna(inplace=True) #removes missing values from df directly
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""] #reassigns df w/ only rows where revenue is not an empty string
tesla_revenue.tail()

#EX 1.3: plot tesla stock graph
make_graph(tesla_data, tesla_revenue, 'Tesla Stock (up to June 2021)')

#EX2: use yfinance to extract gamestop stock data
gamestop = yf.Ticker("GME")
gme_data = gamestop.history(period="max")
gme_data.reset_index(inplace=True)
gme_data.head()

#EX2.1: use webscraping to extract tesla revenue data
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data = requests.get(url).text
soup = BeautifulSoup(html_data)

gme_revenue = pd.DataFrame(columns=["Date", "Revenue"])
for row in soup.find("tbody").find_all('tr'):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text
    
    # Finally we append the data of each row to the table
    gme_revenue = gme_revenue.append({"Date":date, "Revenue":revenue}, ignore_index=True) 
    
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',$',"")  
gme_revenue.dropna(inplace=True) #removes missing values from df directly
gme_revenue = gme_revenue[gme_revenue['Revenue'] != ""] #reassigns df w/ only rows where revenue is not an empty string
gme_revenue.tail()


#EX 2.2: Plot gramstop stock graph
make_graph(gme_data, gme_revenue, 'GameStop Stock (up to June 2021)')
